{"version":3,"sources":["globalStyles.js","components/SearchBar/SearchBar.components.js","components/SearchBar/SearchBar.js","components/Weather/Weather.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","FormInput","styled","Input","FormLabel","Label","SearchBar","setFlash","setFlashMessage","locationObj","setLocationObj","getCoords","Form","onSubmit","e","preventDefault","location","target","value","city","FormGroup","className","htmlFor","style","height","fontSize","defaultValue","name","placeholder","Button","type","onClick","color","Weather","weatherObj","symbol","days","d","Date","dayName","getDay","dayIndex","indexOf","Container","fluid","list","country","Row","map","day","Col","key","xs","sm","md","lg","Card","CardHeader","CardTitle","CardSubtitle","weather","description","CardBody","marginBottom","display","alignItems","parseInt","temp","min","max","humidity","sunrise","toLocaleTimeString","hour","minute","sunset","App","useState","setWeatherObj","units","setUnits","setSymbol","showFlash","flashMessage","success","position","getCity","coords","latitude","longitude","error","lat","long","a","fetch","response","json","res","getWeatherObj","cod","message","useEffect","setTimeout","minHeight","Alert","duration","persistOnHover","ButtonGroup","width","active","navigator","geolocation","getCurrentPosition","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c325e4e.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\"\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n  }\n`","import styled from \"styled-components\"\nimport { Input, Label, Button } from \"reactstrap\"\n\nexport const FormInput = styled(Input)`\n  width: 50%;\n  margin: 0 auto;\n  position: relative;\n  padding-right: 30px;\n\n  @media screen and (max-width: 768px) {\n    width: 90%; \n  }\n`\n\nexport const FormLabel = styled(Label)`\n\n`\n","import React from \"react\"\nimport {\n  Form,\n  FormGroup,\n  Button\n} from \"reactstrap\"\nimport { FormInput, FormLabel, LocationButton } from \"./SearchBar.components\"\nimport { FaSearchLocation } from \"react-icons/fa\"\n\n\nexport default function SearchBar({\n  setFlash,\n  setFlashMessage,\n  locationObj,\n  setLocationObj,\n  getCoords\n}) {\n  function submitHandler(e) {\n    e.preventDefault();\n    const location = e.target.location.value\n    if(location === \"\") {\n      setFlashMessage(\"bad query\");\n      setFlash(true)\n    } else {\n      setLocationObj({city: location})\n    }\n  }\n\n\n  return(\n    <Form onSubmit={submitHandler}>\n      <FormGroup>\n        <FormLabel className=\"text-center w-100 h2\" htmlFor=\"location\">City</FormLabel>\n        <FormInput style={{height: '50px', fontSize: \"1.5rem\"}} defaultValue={locationObj.city} name=\"location\" placeholder=\"City Name..\" />\n      </FormGroup>\n      <FormGroup  className=\"text-center\">\n        <Button className=\"btn-outline-light btn-lg btn\">Search</Button>\n        <p className=\"mb-0\">Or</p>\n        <Button type=\"button\" className=\"btn-lg btn btn-outline-light\" onClick={getCoords} color=\"info\">Get My Location</Button>\n      </FormGroup>\n    </Form>\n  )\n}","import React from \"react\";\nimport { FiSunset, FiSunrise } from \"react-icons/fi\"\n\nimport {\n  Container,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Row,\n  Col, \n  Card\n} from \"reactstrap\"\n\n\nexport default function Weather({\n  weatherObj,\n  locationObj,\n  symbol,\n}) {\n  let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  let d = new Date();\n  let dayName = days[d.getDay()];\n  let dayIndex = days.indexOf(dayName);\n  return( \n      <Container color=\"primary\" fluid={true}>\n        {\n          locationObj.city && weatherObj.list && \n          <h3 className=\"text-center\">{locationObj.city + \", \" + weatherObj.city.country}</h3>\n        }\n        <Row>\n        {\n        weatherObj && weatherObj.list && \n        weatherObj.list.map(\n        day => \n            <Col className=\"m-0 justify-content-between\" key={dayIndex} xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\">\n              <Card className=\"m-0 mt-3 bg-light text-dark\" key={days[(dayIndex) % 7]}>\n                <CardHeader>\n                  <CardTitle><h3>{days[(dayIndex ++) % 7]}</h3></CardTitle>\n                  <CardSubtitle><em style={{fontSize: \"1.3rem\"}}>{day.weather[0].description}</em></CardSubtitle>\n                </CardHeader>\n                {\n                  <CardBody>\n                    \n                    <h4 style={{marginBottom: \"4px\", display: \"flex\", alignItems: \"center\"}}>Current: &nbsp;{parseInt(day.temp.day)}{symbol}</h4>\n                    <h4 style={{marginBottom: \"4px\", display: \"flex\", alignItems: \"center\"}} className=\"mb-0\">Min: &nbsp;{parseInt(day.temp.min)}{symbol}</h4>\n                    <h4 style={{marginBottom: \"4px\", display: \"flex\", alignItems: \"center\"}} className=\"mb-0\">Max: &nbsp;{parseInt(day.temp.max)}{symbol}</h4>\n                    <h4 className=\"mb-3\">Humidity: &nbsp;{day.humidity}%</h4>\n                    <h4 className=\"mb-3\">Sunrise({<FiSunrise/>}): {new Date(day.sunrise * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</h4>\n                    <h4 className=\"mb-3\">Sunset({<FiSunset />}): {new Date(day.sunset * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</h4>\n                  </CardBody>\n                }\n              </Card>\n            </Col>\n          )}\n        </Row> \n      </Container>\n  )}","import React, { useState, useEffect } from 'react';\nimport { \n  GlobalStyle, \n} from \"./globalStyles\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\n// Components\nimport { Container, Alert, Button, ButtonGroup } from \"reactstrap\"\nimport { SearchBar, Weather } from \"./components\"\nimport FlashMessage from \"react-flash-message\";\nimport { RiCelsiusFill, RiFahrenheitFill } from \"react-icons/ri\";\n\nfunction App() {\n  const [weatherObj, setWeatherObj] = useState({});\n  const [locationObj, setLocationObj] = useState({})\n  const [units, setUnits] = useState(\"metric\")\n  const [symbol, setSymbol] = useState(<RiCelsiusFill />)\n\n  // FlashMessage States\n  const [showFlash, setFlash] = useState(false)\n  const [flashMessage, setFlashMessage] = useState(\"Default Flash Message\")\n  \n  // Set symbol when unit changes\n  useEffect(()   => {\n    if(weatherObj.list) {\n      setSymbol(units === \"metric\" ? <RiCelsiusFill /> : <RiFahrenheitFill />);\n      getWeatherObj()\n    }\n  }, [units])\n  \n\n  // Set showFlash state back to false after message fades\n  useEffect(() => {\n    if(showFlash) { \n      setTimeout(() => {\n        setFlash(false)\n      }, 3000)\n    }\n  }, [showFlash])\n\n  // Call OpenWeather API after locationObj is changed\n  useEffect(() => {\n    if(locationObj.city) {\n      getWeatherObj()\n    }\n  }, [locationObj])\n\n  // Geolocation API\n  function getCoords() {\n    if(navigator.geolocation) {\n      setFlashMessage(\"Loading...\");\n      setFlash(true);\n      navigator.geolocation.getCurrentPosition(success, error)\n    } else {\n      setFlashMessage(\"Geolocation not supported on you browser!\")\n      setFlash(true);\n    }\n  }\n\n  // Callbacks for HTML Geolocation function\n  function success(position) {\n    getCity(position.coords.latitude, position.coords.longitude)\n  }\n  function error() {\n    setFlashMessage(\"Cannot Get Position!\");\n    setFlash(true);\n  }\n\n  // Use HTML5 Geolocation's coords to get city name\n  async function getCity(lat, long) {\n    const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${long}&localityLanguage=en`)\n    const res = await response.json()\n    setLocationObj(res);\n  }\n\n  // OpenWeather API\n  async function getWeatherObj() {\n    setFlashMessage(\"Loading...\")\n    setFlash(true);\n    try {\n      const response = await fetch(`https://community-open-weather-map.p.rapidapi.com/forecast/daily?q=${locationObj.city}&cnt=7&units=${units}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\"\n      }\n    })\n    // if(!response.ok) { throw response }\n    const res = await response.json()\n    setWeatherObj(res)\n    setFlash(false)\n    if(res.cod === \"404\") { throw res.message }\n    } catch(e) {\n      setFlashMessage(e);\n      setFlash(true);\n    }\n  } \n\n  function toggleUnits() {\n    setUnits(units === \"metric\" ? \"imperial\" : \"metric\");\n  }\n\n  return (\n    <Container className=\"bg-secondary px-0 text-light\" style={{minHeight: \"100vh\"}} fluid={true} >\n      <GlobalStyle />\n      {\n        showFlash && \n        <div className=\"w-100\">\n          <Alert color=\"info\" className=\"text-center\">\n            <FlashMessage duration={3000} persistOnHover={true}>{flashMessage}</FlashMessage>\n          </Alert>\n        </div>\n      }\n      <ButtonGroup style={{width: \"100px\"}}className=\"d-flex justify-content-center align-items-center\">\n        <Button color=\"info\" active={units === \"metric\"} onClick={() => units !== 'metric' ? setUnits('metric') : \"\"}><RiCelsiusFill /></Button>\n        <Button color=\"info\" active={units === \"imperial\"} onClick={() => units === 'metric' ? setUnits('imperial') : \"\"}><RiFahrenheitFill /></Button>\n      </ButtonGroup>\n      <SearchBar\n        setFlash={setFlash}\n        setFlashMessage={setFlashMessage}\n        getWeatherObj={getWeatherObj}\n        locationObj={locationObj}\n        setLocationObj={setLocationObj}\n        getCoords={getCoords}\n      />\n      <Weather \n        getWeatherObj={getWeatherObj}\n        weatherObj={weatherObj}\n        locationObj={locationObj}\n        units={units}\n        symbol={symbol}\n      />\n    </Container>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}