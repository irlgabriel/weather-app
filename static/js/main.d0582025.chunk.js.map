{"version":3,"sources":["globalStyles.js","components/SearchBar/SearchBar.components.js","components/SearchBar/SearchBar.js","components/Weather/Weather.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","FormInput","styled","Input","FormLabel","Label","InputContainer","Container","SearchBar","units","setUnits","setFlash","setFlashMessage","locationObj","setLocationObj","getCoords","Form","onSubmit","e","preventDefault","location","target","value","city","FormGroup","className","htmlFor","style","height","fontSize","defaultValue","name","placeholder","ButtonGroup","width","position","top","right","Button","borderRadius","color","active","onClick","borderTopRightRadius","borderBottomRightRadius","type","Weather","weatherObj","symbol","days","d","Date","dayName","getDay","dayIndex","indexOf","fluid","list","country","Row","map","day","Col","key","xs","sm","md","Card","CardHeader","CardTitle","CardSubtitle","weather","description","CardBody","display","alignItems","parseInt","temp","min","max","humidity","sunrise","toLocaleTimeString","hour","minute","sunset","App","useState","setWeatherObj","setSymbol","showFlash","flashMessage","success","getCity","coords","latitude","longitude","error","lat","long","a","fetch","response","json","res","getWeatherObj","cod","message","useEffect","setTimeout","minHeight","Alert","duration","persistOnHover","navigator","geolocation","getCurrentPosition","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0582025.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\"\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n  }\n`","import styled from \"styled-components\"\nimport { Input, Label, Button, Container} from \"reactstrap\"\n\nexport const FormInput = styled(Input)`\n  \n`\n\nexport const FormLabel = styled(Label)`\n\n`\nexport const InputContainer = styled(Container)`\n  padding: 0;\n  width: 50%;\n  position: relative;\n  @media screen and (max-width: 768px) {\n    width: 90%; \n  }\n`","import React from \"react\";\nimport {\n  Form,\n  FormGroup,\n  Button,\n  ButtonGroup\n} from \"reactstrap\";\nimport { FormInput, FormLabel, LocationButton, InputContainer } from \"./SearchBar.components\";\nimport { FaSearchLocation } from \"react-icons/fa\";\nimport { RiFahrenheitFill, RiCelsiusFill } from \"react-icons/ri\";\n\n\nexport default function SearchBar({\n  units,\n  setUnits,\n  setFlash,\n  setFlashMessage,\n  locationObj,\n  setLocationObj,\n  getCoords\n}) {\n  function submitHandler(e) {\n    e.preventDefault();\n    const location = e.target.location.value\n    if(location === \"\") {\n      setFlashMessage(\"bad query\");\n      setFlash(true)\n    } else {\n      setLocationObj({city: location})\n    }\n  }\n\n\n  return(\n    <Form onSubmit={submitHandler}>\n      <FormGroup>\n        <FormLabel className=\"text-center w-100 h2\" htmlFor=\"location\">City</FormLabel>\n        <InputContainer>\n          <FormInput className=\"mx-0\" style={{height: '50px', fontSize: \"1.5rem\"}} defaultValue={locationObj.city} name=\"location\" placeholder=\"City Name..\" />\n          <ButtonGroup\n            style={{width: \"100px\", height: \"50px\", position: \"absolute\", top:\"0\", right: \"0\"}} className=\"d-flex justify-content-center align-items-center\"\n          >\n          <Button style={{height: \"100%\", borderRadius: \"0\"}} className=\"p-0 m-0\" color=\"info\" active={units === \"metric\"} onClick={() => units !== 'metric' ? setUnits('metric') : \"\"}><RiCelsiusFill /></Button>\n          <Button style={{height: \"100%\", borderRadius: \"0\", borderTopRightRadius: \"3px\", borderBottomRightRadius: \"3px\"}} className=\"p-0 m-0\" color=\"info\" active={units === \"imperial\"} onClick={() => units === 'metric' ? setUnits('imperial') : \"\"}><RiFahrenheitFill /></Button>\n          </ButtonGroup>\n        </InputContainer>\n      </FormGroup>\n      <FormGroup  className=\"text-center\">\n        <Button className=\"btn-outline-light btn-lg btn\">Search</Button>\n        <p className=\"mb-0\">Or</p>\n        <Button type=\"button\" className=\"btn-lg btn btn-outline-light\" onClick={getCoords} color=\"info\">Get My Location</Button>\n      </FormGroup>\n    </Form>\n  )\n}","import React from \"react\";\nimport { FiSunset, FiSunrise } from \"react-icons/fi\"\n\nimport {\n  Container,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Row,\n  Col, \n  Card\n} from \"reactstrap\"\n\n\nexport default function Weather({\n  weatherObj,\n  locationObj,\n  symbol,\n}) {\n  let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  let d = new Date();\n  let dayName = days[d.getDay()];\n  let dayIndex = days.indexOf(dayName);\n  return( \n      <Container color=\"primary\" fluid={true}>\n        {\n          locationObj.city && weatherObj.list && \n          <h3 className=\"text-center\">{locationObj.city + \", \" + weatherObj.city.country}</h3>\n        }\n        <Row>\n        {\n        weatherObj && weatherObj.list && \n        weatherObj.list.map(\n        day => \n            <Col className=\"m-0 justify-content-between\" key={dayIndex} xs=\"12\" sm=\"6\" md=\"4\">\n              <Card className=\"m-0 mb-2 mt-3 bg-light text-dark\" key={days[(dayIndex) % 7]}>\n                <CardHeader>\n                  <CardTitle><h3>{days[(dayIndex ++) % 7]}</h3></CardTitle>\n                  <CardSubtitle><em style={{fontSize: \"1.3rem\"}}>{day.weather[0].description}</em></CardSubtitle>\n                </CardHeader>\n                {\n                  <CardBody>\n                    <h4 style={{display: \"flex\", alignItems: \"center\"}}>Current: &nbsp;{parseInt(day.temp.day)}{symbol}</h4>\n                    <h4 style={{display: \"flex\", alignItems: \"center\"}}>Min: &nbsp;{parseInt(day.temp.min)}{symbol}</h4>\n                    <h4 style={{display: \"flex\", alignItems: \"center\"}}>Max: &nbsp;{parseInt(day.temp.max)}{symbol}</h4>\n                    <h4>Humidity: &nbsp;{day.humidity}%</h4>\n                    <h4>Sunrise: {new Date(day.sunrise * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</h4>\n                    <h4>Sunset: {new Date(day.sunset * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</h4>\n                  </CardBody>\n                }\n              </Card>\n            </Col>\n          )}\n        </Row> \n      </Container>\n  )}","import React, { useState, useEffect } from 'react';\nimport { \n  GlobalStyle, \n} from \"./globalStyles\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\n// Components\nimport { Container, Alert, Button, ButtonGroup } from \"reactstrap\"\nimport { SearchBar, Weather } from \"./components\"\nimport FlashMessage from \"react-flash-message\";\nimport { RiCelsiusFill, RiFahrenheitFill } from \"react-icons/ri\";\n\nfunction App() {\n  const [weatherObj, setWeatherObj] = useState({});\n  const [locationObj, setLocationObj] = useState({})\n  const [units, setUnits] = useState(\"metric\")\n  const [symbol, setSymbol] = useState(<RiCelsiusFill />)\n\n  // FlashMessage States\n  const [showFlash, setFlash] = useState(false)\n  const [flashMessage, setFlashMessage] = useState(\"Default Flash Message\")\n  \n  // Set symbol when unit changes\n  useEffect(()   => {\n    if(weatherObj.list) {\n      setSymbol(units === \"metric\" ? <RiCelsiusFill /> : <RiFahrenheitFill />);\n      getWeatherObj()\n    }\n  }, [units])\n  \n\n  // Set showFlash state back to false after message fades\n  useEffect(() => {\n    if(showFlash) { \n      setTimeout(() => {\n        setFlash(false)\n      }, 3000)\n    }\n  }, [showFlash])\n\n  // Call OpenWeather API after locationObj is changed\n  useEffect(() => {\n    if(locationObj.city) {\n      getWeatherObj()\n    }\n  }, [locationObj])\n\n  // Geolocation API\n  function getCoords() {\n    if(navigator.geolocation) {\n      setFlashMessage(\"Loading...\");\n      setFlash(true);\n      navigator.geolocation.getCurrentPosition(success, error)\n    } else {\n      setFlashMessage(\"Geolocation not supported on you browser!\")\n      setFlash(true);\n    }\n  }\n\n  // Callbacks for HTML Geolocation function\n  function success(position) {\n    getCity(position.coords.latitude, position.coords.longitude)\n  }\n  function error() {\n    setFlashMessage(\"Cannot Get Position!\");\n    setFlash(true);\n  }\n\n  // Use HTML5 Geolocation's coords to get city name\n  async function getCity(lat, long) {\n    const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${long}&localityLanguage=en`)\n    const res = await response.json()\n    setLocationObj(res);\n  }\n\n  // OpenWeather API\n  async function getWeatherObj() {\n    setFlashMessage(\"Loading...\")\n    setFlash(true);\n    try {\n      const response = await fetch(`https://community-open-weather-map.p.rapidapi.com/forecast/daily?q=${locationObj.city}&cnt=7&units=${units}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\"\n      }\n    })\n    // if(!response.ok) { throw response }\n    const res = await response.json()\n    setWeatherObj(res)\n    setFlash(false)\n    if(res.cod === \"404\") { throw res.message }\n    } catch(e) {\n      setFlashMessage(e);\n      setFlash(true);\n    }\n  } \n\n  function toggleUnits() {\n    setUnits(units === \"metric\" ? \"imperial\" : \"metric\");\n  }\n\n  return (\n    <Container className=\"bg-secondary px-0 text-light\" style={{minHeight: \"100vh\"}} fluid={true} >\n      <GlobalStyle />\n      {\n        showFlash && \n        <div className=\"w-100\">\n          <Alert color=\"info\" className=\"text-center\">\n            <FlashMessage duration={3000} persistOnHover={true}>{flashMessage}</FlashMessage>\n          </Alert>\n        </div>\n      }\n      \n      <SearchBar\n        setUnits={setUnits}\n        units={units}\n        setFlash={setFlash}\n        setFlashMessage={setFlashMessage}\n        getWeatherObj={getWeatherObj}\n        locationObj={locationObj}\n        setLocationObj={setLocationObj}\n        getCoords={getCoords}\n      />\n      <Weather \n        getWeatherObj={getWeatherObj}\n        weatherObj={weatherObj}\n        locationObj={locationObj}\n        units={units}\n        symbol={symbol}\n      />\n    </Container>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}